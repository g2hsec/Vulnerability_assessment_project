const mongoose = require('mongoose');
const bcyrpt = require('bcrypt');
const saltRounds = 10
const jwt = require('jsonwebtoken')

const userSchema = mongoose.Schema({
    name: {
        type: String,
        maxlength: 50
    },

    email:{
        type: String,
        trim: true,
        unique: 1
    },
    password:{
        type: String,
        minlength: 5
    },
    lastname:{
        type: String,
        maxlength: 50
    },
    role: { //일반유저와 관리자 구별 숫자로
        type: Number,
        default: 0
    },
    image: String,
    token:{
        type: String
    },
    tokenExp:{
        type: Number
    }
})

userSchema.pre('save', function( next ){ // test.save시 save 하기전에 특정 작업을 먼저 수행하도혹 하는 부분
    var user = this;
    if(user.isModified('password')){
        bcyrpt.genSalt(saltRounds, function (err, salt){
            if(err) return next(err)
            bcyrpt.hash(user.password, salt, function(err, hash){
                if(err) return next(err)
                user.password = hash
                next()
            });
        });
    }else{
        next()
    }
    
})

userSchema.methods.comparePassword = function(plainPassword, cb){
    bcyrpt.compare(plainPassword, this.password, function(err, isMatch){
        if(err) return cb(err),
        cb(null, isMatch)
    })
}

userSchema.methods.genToken = function(cb){
    var user = this;

    var token = jwt.sign(user._id.toHexString(), 'secretToken')
    user.token = token
    user.save(function(err, user){
        if(err) return cb(err)
        cb(null, user)
    })
}

const User = mongoose.model('User', userSchema)

module.exports = { User }